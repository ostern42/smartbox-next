package main

import (
	"context"
	"embed"
	"fmt"

	"github.com/wailsapp/wails/v2"
	"github.com/wailsapp/wails/v2/pkg/options"
	"github.com/wailsapp/wails/v2/pkg/options/assetserver"
)

//go:embed all:frontend/dist
var assets embed.FS

// App struct
type App struct {
	ctx context.Context
}

// NewApp creates a new App application struct
func NewApp() *App {
	return &App{}
}

// startup is called when the app starts. The context is saved
// so we can call the runtime methods
func (a *App) startup(ctx context.Context) {
	a.ctx = ctx
}

// GetCameras returns available video sources
func (a *App) GetCameras() []Camera {
	// TODO: Implement real camera detection
	return []Camera{
		{ID: "webcam-0", Name: "Integrated Webcam", Type: "webcam"},
		{ID: "usb-1", Name: "USB Video Grabber", Type: "usb"},
		{ID: "virtual-0", Name: "OBS Virtual Camera", Type: "virtual"},
	}
}

// CaptureImage captures a single image
func (a *App) CaptureImage(cameraID string) (string, error) {
	// TODO: Implement actual capture
	return fmt.Sprintf("Captured from %s", cameraID), nil
}

// GetSystemInfo returns system information
func (a *App) GetSystemInfo() SystemInfo {
	return SystemInfo{
		Version:      "0.1.0",
		Environment:  "development",
		DicomEnabled: true,
	}
}

// Camera represents a video source
type Camera struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Type string `json:"type"`
}

// SystemInfo contains system information
type SystemInfo struct {
	Version      string `json:"version"`
	Environment  string `json:"environment"`
	DicomEnabled bool   `json:"dicomEnabled"`
}

func main() {
	// Create an instance of the app structure
	app := NewApp()

	// Create application with options
	err := wails.Run(&options.App{
		Title:  "SmartBox Next",
		Width:  1280,
		Height: 800,
		AssetServer: &assetserver.Options{
			Assets: assets,
		},
		BackgroundColour: &options.RGBA{R: 27, G: 38, B: 54, A: 1},
		OnStartup:        app.startup,
		Bind: []interface{}{
			app,
		},
	})

	if err != nil {
		println("Error:", err.Error())
	}
}