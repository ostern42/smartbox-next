using Microsoft.UI.Xaml;
using Microsoft.UI.Xaml.Controls;
using Microsoft.UI.Xaml.Media.Imaging;
using System;
using System.Threading.Tasks;
using Windows.Media.Capture;
using Windows.Media.MediaProperties;
using Windows.Storage;
using Windows.Security.Authorization.AppCapabilityAccess;
using Windows.Storage.Streams;
using Microsoft.UI.Dispatching;
using Windows.Graphics.Imaging;
using System.IO;
using Windows.Storage.Pickers;
using Windows.Media.Core;
using Windows.Media.Playback;

namespace SmartBoxNext
{
    public sealed partial class MainWindow : Window
    {
        private MediaCapture? _mediaCapture;
        private bool _isInitialized = false;
        private bool _isPreviewing = false;
        private MediaPlayer? _mediaPlayer;
        private int _frameCount = 0;

        private void AddDebugMessage(string message)
        {
            var timestamp = DateTime.Now.ToString("HH:mm:ss");
            if (DebugInfo != null)
            {
                DebugInfo.Text = $"[{timestamp}] {message}\n" + DebugInfo.Text;
            }
            System.Diagnostics.Debug.WriteLine(message);
        }

        public MainWindow()
        {
            this.InitializeComponent();
            this.Title = "SmartBox Next - Medical Imaging";
            
            // Set window size
            var hWnd = WinRT.Interop.WindowNative.GetWindowHandle(this);
            var windowId = Microsoft.UI.Win32Interop.GetWindowIdFromWindow(hWnd);
            var appWindow = Microsoft.UI.Windowing.AppWindow.GetFromWindowId(windowId);
            appWindow.Resize(new Windows.Graphics.SizeInt32 { Width = 1200, Height = 800 });
            
            // Cleanup on close
            this.Closed += async (s, e) =>
            {
                await CleanupCameraAsync();
            };
        }

        private async Task InitializeWebcamAsync()
        {
            try
            {
                AddDebugMessage("=== Starting webcam initialization (MediaPlayer approach) ===");
                
                // Check camera permissions
                var capability = AppCapability.Create("webcam");
                var accessStatus = capability.CheckAccess();
                AddDebugMessage($"Camera access status: {accessStatus}");
                
                if (accessStatus != AppCapabilityAccessStatus.Allowed)
                {
                    var dialog = new ContentDialog
                    {
                        Title = "Camera Access Required",
                        Content = "Please grant camera access in Windows Settings > Privacy & Security > Camera",
                        PrimaryButtonText = "Open Settings",
                        CloseButtonText = "Cancel",
                        XamlRoot = this.Content.XamlRoot
                    };

                    if (await dialog.ShowAsync() == ContentDialogResult.Primary)
                    {
                        await Windows.System.Launcher.LaunchUriAsync(new Uri("ms-settings:privacy-webcam"));
                    }
                    return;
                }

                // Find camera devices
                var devices = await Windows.Devices.Enumeration.DeviceInformation.FindAllAsync(
                    Windows.Devices.Enumeration.DeviceClass.VideoCapture);
                
                AddDebugMessage($"Found {devices.Count} camera devices");
                foreach (var device in devices)
                {
                    AddDebugMessage($"  - {device.Name} (ID: {device.Id})");
                }
                
                if (devices.Count == 0)
                {
                    WebcamPlaceholder.Text = "No camera found";
                    return;
                }

                // Initialize MediaCapture
                _mediaCapture = new MediaCapture();
                var settings = new MediaCaptureInitializationSettings
                {
                    VideoDeviceId = devices[0].Id,
                    StreamingCaptureMode = StreamingCaptureMode.Video,
                    MediaCategory = MediaCategory.Communications
                };
                
                await _mediaCapture.InitializeAsync(settings);
                AddDebugMessage("MediaCapture initialized successfully");

                // Set up MediaPlayer for real-time preview
                _mediaPlayer = new MediaPlayer();
                _mediaPlayer.RealTimePlayback = true;
                _mediaPlayer.IsLoopingEnabled = true;
                
                // Create MediaSource from MediaCapture
                var mediaSource = MediaSource.CreateFromMediaFrameSource(_mediaCapture.FrameSources.Values.First());
                _mediaPlayer.Source = mediaSource;
                
                // Set the MediaPlayer to the MediaPlayerElement
                WebcamPreview.SetMediaPlayer(_mediaPlayer);
                
                _isPreviewing = true;
                _isInitialized = true;
                
                WebcamPlaceholder.Visibility = Visibility.Collapsed;
                AddDebugMessage("Webcam initialization complete! Real-time preview started.");
            }
            catch (UnauthorizedAccessException)
            {
                await ShowErrorDialog("Webcam access denied. Please check Windows privacy settings:\n\nSettings > Privacy > Camera > Allow apps to access your camera");
            }
            catch (Exception ex)
            {
                AddDebugMessage($"Error: {ex.GetType().Name} - {ex.Message}");
                await ShowErrorDialog($"Failed to initialize webcam: {ex.Message}\n\nDetails: {ex.GetType().Name}");
            }
        }

        private async Task UpdatePreviewAsync()
        {
            if (_mediaCapture == null || !_isPreviewing) return;

            try
            {
                _frameCount++;
                
                // Capture to memory stream
                var stream = new InMemoryRandomAccessStream();
                await _mediaCapture.CapturePhotoToStreamAsync(ImageEncodingProperties.CreateJpeg(), stream);
                stream.Seek(0);

                // Create bitmap and display
                var bitmapImage = new BitmapImage();
                await bitmapImage.SetSourceAsync(stream);
                WebcamPreview.Source = bitmapImage;

                // Update debug info every 10 frames
                if (_frameCount % 10 == 0)
                {
                    AddDebugMessage($"Preview frames: {_frameCount}");
                }
            }
            catch (Exception ex)
            {
                // Don't spam errors, just log once
                if (_frameCount == 1)
                {
                    AddDebugMessage($"Preview error: {ex.Message}");
                }
            }
        }

        private async void InitWebcamButton_Click(object sender, RoutedEventArgs e)
        {
            if (!_isInitialized)
            {
                await InitializeWebcamAsync();
            }
            else
            {
                await ShowInfoDialog("Webcam is already initialized");
            }
        }

        private async void CaptureButton_Click(object sender, RoutedEventArgs e)
        {
            if (_mediaCapture == null || !_isInitialized)
            {
                await ShowErrorDialog("Webcam not initialized");
                return;
            }

            try
            {
                // Create storage file
                var myPictures = await StorageLibrary.GetLibraryAsync(KnownLibraryId.Pictures);
                var captureFolder = await myPictures.SaveFolder.CreateFolderAsync("SmartBoxNext", CreationCollisionOption.OpenIfExists);
                var photoFile = await captureFolder.CreateFileAsync($"Capture_{DateTime.Now:yyyyMMdd_HHmmss}.jpg", CreationCollisionOption.GenerateUniqueName);

                // Capture photo
                var imageEncodingProperties = ImageEncodingProperties.CreateJpeg();
                await _mediaCapture.CapturePhotoToStorageFileAsync(imageEncodingProperties, photoFile);

                // Load and display the captured image
                using (var stream = await photoFile.OpenAsync(FileAccessMode.Read))
                {
                    var bitmapImage = new BitmapImage();
                    await bitmapImage.SetSourceAsync(stream);
                    
                    var image = new Image
                    {
                        Source = bitmapImage,
                        Stretch = Microsoft.UI.Xaml.Media.Stretch.Uniform,
                        MaxHeight = 600,
                        MaxWidth = 800
                    };
                    
                    var dialog = new ContentDialog
                    {
                        Title = $"Captured Image: {photoFile.Name}",
                        Content = new ScrollViewer { Content = image },
                        CloseButtonText = "Close",
                        XamlRoot = this.Content.XamlRoot
                    };
                    
                    await dialog.ShowAsync();
                }
            }
            catch (Exception ex)
            {
                await ShowErrorDialog($"Capture failed: {ex.Message}");
            }
        }

        private async void ExportDicomButton_Click(object sender, RoutedEventArgs e)
        {
            await ShowInfoDialog("DICOM export will be implemented with fo-dicom");
        }

        private async void PacsSettingsButton_Click(object sender, RoutedEventArgs e)
        {
            await ShowInfoDialog("PACS settings dialog coming soon");
        }

        private async void DebugButton_Click(object sender, RoutedEventArgs e)
        {
            var debugInfo = "=== Webcam Debug Info ===\n\n";
            
            try
            {
                // Check camera permissions
                var capability = AppCapability.Create("webcam");
                var accessStatus = capability.CheckAccess();
                debugInfo += $"Camera Access: {accessStatus}\n\n";
                
                // List all cameras
                var devices = await Windows.Devices.Enumeration.DeviceInformation.FindAllAsync(
                    Windows.Devices.Enumeration.DeviceClass.VideoCapture);
                debugInfo += $"Found {devices.Count} cameras:\n";
                foreach (var device in devices)
                {
                    debugInfo += $"- {device.Name}\n  ID: {device.Id}\n\n";
                }
                
                // Current status
                debugInfo += $"\nInitialized: {_isInitialized}\n";
                debugInfo += $"Previewing: {_isPreviewing}\n";
                debugInfo += $"MediaCapture: {(_mediaCapture != null ? "Created" : "Null")}\n";
                debugInfo += $"Timer: {(_timer != null ? (_timer.IsRunning ? "Running" : "Stopped") : "Null")}\n";
                debugInfo += $"Preview frames: {_frameCount}\n";
            }
            catch (Exception ex)
            {
                debugInfo += $"\nError getting debug info: {ex.Message}\n";
            }
            
            // Create a dialog with a TextBox for copyable text
            var textBox = new TextBox
            {
                Text = debugInfo,
                IsReadOnly = true,
                TextWrapping = TextWrapping.Wrap,
                AcceptsReturn = true,
                FontFamily = new Microsoft.UI.Xaml.Media.FontFamily("Consolas"),
                MinHeight = 400,
                MaxHeight = 600
            };
            
            var scrollViewer = new ScrollViewer
            {
                Content = textBox,
                VerticalScrollBarVisibility = ScrollBarVisibility.Auto
            };
            
            var dialog = new ContentDialog
            {
                Title = "Webcam Debug Information",
                Content = scrollViewer,
                CloseButtonText = "Close",
                XamlRoot = this.Content.XamlRoot,
                DefaultButton = ContentDialogButton.Close
            };
            
            await dialog.ShowAsync();
        }

        private async Task ShowErrorDialog(string message)
        {
            var dialog = new ContentDialog
            {
                Title = "Error",
                Content = message,
                CloseButtonText = "OK",
                XamlRoot = this.Content.XamlRoot
            };
            await dialog.ShowAsync();
        }

        private async Task ShowInfoDialog(string message)
        {
            var dialog = new ContentDialog
            {
                Title = "Information",
                Content = message,
                CloseButtonText = "OK",
                XamlRoot = this.Content.XamlRoot
            };
            await dialog.ShowAsync();
        }

        private async Task CleanupCameraAsync()
        {
            try
            {
                _isInitialized = false;
                _isPreviewing = false;

                if (_timer != null)
                {
                    _timer.Stop();
                    _timer = null;
                }

                if (_mediaCapture != null)
                {
                    _mediaCapture.Dispose();
                    _mediaCapture = null;
                }
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Cleanup error: {ex.Message}");
            }
        }
    }
}