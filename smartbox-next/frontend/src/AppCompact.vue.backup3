<template>
  <div id="app">
    <div class="container">
      <!-- Left Panel -->
      <div class="left-panel">
        <!-- Header -->
        <div class="header">
          <h1>SmartBox Next</h1>
          <div class="header-right">
            <span class="version">{{ systemInfo.version }}</span>
            <button @click="exitApp" class="btn-exit" title="Exit">‚úï</button>
          </div>
        </div>

        <!-- Patient Info -->
        <div class="section">
          <h3>Patient</h3>
          <div class="form-row">
            <div class="input-group">
              <input v-model="patient.name" placeholder="Name (Last^First)" class="input" title="Patient Name (Last^First)" />
              <label class="floating-label">Name</label>
            </div>
            <div class="input-group small">
              <input v-model="patient.id" placeholder="ID" class="input" title="Patient ID" />
              <label class="floating-label">ID</label>
            </div>
          </div>
          <div class="form-row">
            <div class="input-group">
              <input v-model="patient.birthDate" type="date" class="input" @change="formatBirthDate" title="Birth Date" />
              <label class="floating-label">Birth Date</label>
            </div>
            <div class="input-group small">
              <select v-model="patient.sex" class="input" title="Patient Sex">
                <option value="">Sex</option>
                <option value="M">M</option>
                <option value="F">F</option>
                <option value="O">O</option>
              </select>
              <label class="floating-label">Sex</label>
            </div>
          </div>
        </div>

        <!-- Study Info -->
        <div class="section">
          <h3>Study</h3>
          <div class="input-group">
            <input v-model="study.accessionNumber" placeholder="Accession #" class="input" title="Accession Number" />
            <label class="floating-label">Accession #</label>
          </div>
          <div class="input-group">
            <input v-model="study.studyDescription" placeholder="Description" class="input" title="Study Description" />
            <label class="floating-label">Description</label>
          </div>
          <div class="input-group">
            <input v-model="study.referringPhysician" placeholder="Referring Physician" class="input" title="Referring Physician Name" />
            <label class="floating-label">Referring Physician</label>
          </div>
          <div class="input-group">
            <input v-model="study.institution" placeholder="Institution" class="input" title="Institution Name" />
            <label class="floating-label">Institution</label>
          </div>
        </div>

        <!-- Camera Selection -->
        <div class="section">
          <h3>Camera</h3>
          <select v-model="selectedDevice" @change="selectMediaDevice(selectedDevice)" class="input">
            <option :value="null">Select Camera</option>
            <option v-for="device in mediaDevices" :key="device.deviceId" :value="device">
              {{ device.label || `Camera ${device.deviceId.slice(0, 8)}` }}
            </option>
          </select>
        </div>

        <!-- Controls -->
        <div class="controls">
          <button @click="startPreview" :disabled="isStreaming" class="btn primary">
            Start Preview
          </button>
          <button @click="stopPreview" :disabled="!isStreaming" class="btn">
            Stop
          </button>
          <button @click="captureFromVideo" :disabled="!isStreaming" class="btn capture">
            üì∏ Capture
          </button>
        </div>

        <!-- Actions -->
        <div class="actions">
          <label class="checkbox">
            <input type="checkbox" v-model="showOverlay" />
            Show Overlay
          </label>
          <button @click="exportDicom" :disabled="!capturedImage" class="btn success">
            Export DICOM
          </button>
          <button @click="clearCapture" :disabled="!capturedImage" class="btn">
            Clear
          </button>
          <button @click="openDicomFolder" class="btn">
            üìÅ Open Folder
          </button>
        </div>
      </div>

      <!-- Right Panel - Preview -->
      <div class="preview-panel">
        <!-- Live Video -->
        <video 
          v-show="isStreaming" 
          ref="videoElement" 
          class="video-preview"
          autoplay
          playsinline
          muted
        ></video>
        
        <!-- Captured Image -->
        <img v-if="capturedImage && !isStreaming" :src="capturedImage" class="captured-preview" />
        
        <!-- Placeholder -->
        <div v-if="!isStreaming && !capturedImage" class="placeholder">
          <div class="placeholder-icon">üì∑</div>
          <p>Select a camera and start preview</p>
        </div>
      </div>
    </div>

    <!-- Message Toast -->
    <div v-if="message" :class="['message', messageType]">
      {{ message }}
    </div>
    
    <!-- Shortcuts Help (show on ? key) -->
    <div :class="['shortcuts-help', { show: showShortcuts }]">
      <h4>Keyboard Shortcuts</h4>
      <div><kbd>Space</kbd> or <kbd>C</kbd> - Capture</div>
      <div><kbd>S</kbd> - Start/Stop Preview</div>
      <div><kbd>E</kbd> - Export DICOM</div>
      <div><kbd>D</kbd> - Toggle Dark Mode</div>
      <div><kbd>Esc</kbd> - Clear Capture</div>
      <div><kbd>?</kbd> - Show/Hide Help</div>
    </div>
    
    <!-- Shortcuts Help (show on ? key) -->
    <div :class=\"['shortcuts-help', { show: showShortcuts }]\">
      <h4>Keyboard Shortcuts</h4>
      <div><kbd>Space</kbd> or <kbd>C</kbd> - Capture</div>
      <div><kbd>S</kbd> - Start/Stop Preview</div>
      <div><kbd>E</kbd> - Export DICOM</div>
      <div><kbd>D</kbd> - Toggle Dark Mode</div>
      <div><kbd>Esc</kbd> - Clear Capture</div>
      <div><kbd>?</kbd> - Show/Hide Help</div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, onUnmounted } from 'vue'
import { GetSystemInfo, SetPatientInfo, SetStudyInfo, ExportDicom, OpenDicomFolder } from '../wailsjs/go/main/App'
import { Quit } from '../wailsjs/runtime/runtime'

// State
const mediaDevices = ref([])
const selectedDevice = ref(null)
const systemInfo = ref({ version: '...', environment: 'loading', dicomEnabled: false })
const message = ref('')
const messageType = ref('info')
const capturedImage = ref(null)
const isStreaming = ref(false)
const videoElement = ref(null)
const currentStream = ref(null)
const showOverlay = ref(true)
const darkMode = ref(true) // Default to dark for OR
const showShortcuts = ref(false)

// Patient info
const patient = ref({
  name: 'Loriot^Vicco von',
  id: '12345678',
  birthDate: '19231112',
  sex: 'M'
})

// Study info
const study = ref({
  accessionNumber: 'ACC-' + Date.now().toString().slice(-6),
  studyDescription: 'SmartBox Capture',
  referringPhysician: 'Dr. Kl√∂bner',
  performingPhysician: 'Dr. M√ºller-L√ºdenscheidt',
  institution: 'Pappa ante Portas Klinik'
})

// Format birth date for DICOM (YYYYMMDD)
const formatBirthDate = (event) => {
  const date = new Date(event.target.value)
  patient.value.birthDate = date.toISOString().slice(0, 10).replace(/-/g, '')
}

// Get browser media devices
const getMediaDevices = async () => {
  try {
    const devices = await navigator.mediaDevices.enumerateDevices()
    mediaDevices.value = devices.filter(device => device.kind === 'videoinput')
    
    if (mediaDevices.value.length > 0 && !selectedDevice.value) {
      selectedDevice.value = mediaDevices.value[0]
    }
  } catch (error) {
    console.error('Failed to enumerate devices:', error)
    showMessage('Failed to access camera devices', 'error')
  }
}

// Select media device
const selectMediaDevice = (device) => {
  selectedDevice.value = device
  if (device && isStreaming.value) {
    startPreview()
  }
}

// Start video preview
const startPreview = async () => {
  if (!selectedDevice.value) {
    showMessage('Please select a camera first', 'warning')
    return
  }
  
  try {
    if (currentStream.value) {
      stopPreview()
    }
    
    const constraints = {
      video: {
        deviceId: selectedDevice.value.deviceId,
        width: { ideal: 1920 },
        height: { ideal: 1080 }
      }
    }
    
    const stream = await navigator.mediaDevices.getUserMedia(constraints)
    currentStream.value = stream
    
    if (videoElement.value) {
      videoElement.value.srcObject = stream
      isStreaming.value = true
      showMessage('Preview started', 'success')
    }
  } catch (error) {
    console.error('Failed to start preview:', error)
    showMessage('Failed to access camera: ' + error.message, 'error')
  }
}

// Stop video preview
const stopPreview = () => {
  if (currentStream.value) {
    currentStream.value.getTracks().forEach(track => track.stop())
    currentStream.value = null
  }
  
  if (videoElement.value) {
    videoElement.value.srcObject = null
  }
  
  isStreaming.value = false
}

// Store original image without overlay for DICOM
const originalImage = ref(null)

// Capture from video stream
const captureFromVideo = () => {
  if (!videoElement.value || !isStreaming.value) {
    showMessage('No video stream active', 'warning')
    return
  }
  
  try {
    const canvas = document.createElement('canvas')
    canvas.width = videoElement.value.videoWidth
    canvas.height = videoElement.value.videoHeight
    
    const ctx = canvas.getContext('2d')
    ctx.drawImage(videoElement.value, 0, 0)
    
    // Save original image without overlay for DICOM (smaller file)
    originalImage.value = canvas.toDataURL('image/jpeg', 0.7)
    
    // Add overlay for display only
    if (showOverlay.value) {
      ctx.fillStyle = 'rgba(0, 0, 0, 0.7)'
      ctx.fillRect(0, 0, canvas.width, 60)
      
      ctx.fillStyle = 'white'
      ctx.font = '18px Arial'
      ctx.fillText(patient.value.name || 'No Patient', 15, 25)
      ctx.fillText(`ID: ${patient.value.id || 'No ID'}`, 15, 45)
      ctx.fillText(new Date().toLocaleString(), canvas.width - 200, 25)
    }
    
    // This is for display only
    capturedImage.value = canvas.toDataURL('image/jpeg', 0.85)
    showMessage('Image captured!', 'success')
    
    // Keep video running - don't pause it
    // The canvas capture doesn't affect the video stream
  } catch (error) {
    console.error('Capture failed:', error)
    showMessage('Capture failed: ' + error.message, 'error')
  }
}

// Export to DICOM
const exportDicom = async () => {
  if (!originalImage.value) {
    showMessage('No image to export', 'warning')
    return
  }
  
  if (!patient.value.name || !patient.value.id) {
    showMessage('Patient name and ID are required', 'warning')
    return
  }
  
  try {
    await SetPatientInfo(patient.value)
    await SetStudyInfo(study.value)
    // Use original image without overlay for smaller DICOM file
    const outputPath = await ExportDicom(originalImage.value)
    showMessage(`DICOM exported: ${outputPath}`, 'success')
  } catch (error) {
    console.error('DICOM export failed:', error)
    showMessage('DICOM export failed: ' + error.message, 'error')
  }
}

// Open DICOM folder
const openDicomFolder = async () => {
  try {
    await OpenDicomFolder()
  } catch (error) {
    showMessage('Failed to open folder', 'error')
  }
}

// Clear captured image
const clearCapture = () => {
  capturedImage.value = null
  originalImage.value = null
  showMessage('Capture cleared', 'info')
  // Restart preview if it was streaming before
  if (isStreaming.value && selectedDevice.value) {
    startPreview()
  }
}

// Exit application
const exitApp = async () => {
  if (confirm('Exit SmartBox Next?')) {
    // Stop all streams first
    if (currentStream.value) {
      stopPreview()
    }
    // Use Wails Quit function
    await Quit()
  }
}

// Show message
const showMessage = (text, type = 'info') => {
  message.value = text
  messageType.value = type
  setTimeout(() => {
    message.value = ''
  }, 3000)
}

// Load system info
const loadSystemInfo = async () => {
  try {
    systemInfo.value = await GetSystemInfo()
  } catch (error) {
    console.error('Failed to load system info:', error)
  }
}

// Keyboard shortcuts
const handleKeyboard = (event) => {
  // Prevent shortcuts when typing in inputs
  if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {
    return
  }
  
  switch(event.key.toLowerCase()) {
    case ' ':  // Spacebar
      event.preventDefault()
      if (isStreaming.value) {
        captureFromVideo()
      } else {
        startPreview()
      }
      break
    case 'c':  // C for Capture
      if (isStreaming.value) {
        captureFromVideo()
      }
      break
    case 's':  // S for Start/Stop
      if (isStreaming.value) {
        stopPreview()
      } else {
        startPreview()
      }
      break
    case 'e':  // E for Export
      if (capturedImage.value) {
        exportDicom()
      }
      break
    case 'd':  // D for Dark mode toggle
      darkMode.value = !darkMode.value
      break
    case 'escape':
      if (capturedImage.value) {
        capturedImage.value = null
        originalImage.value = null
      }
      break
    case '?':
      showShortcuts.value = !showShortcuts.value
      // Auto-hide after 5 seconds
      if (showShortcuts.value) {
        setTimeout(() => {
          showShortcuts.value = false
        }, 5000)
      }
      break
  }
}

// Initialize
onMounted(async () => {
  await loadSystemInfo()
  await getMediaDevices()
  
  // Listen for device changes
  navigator.mediaDevices.addEventListener('devicechange', getMediaDevices)
  
  // Add keyboard shortcuts
  window.addEventListener('keydown', handleKeyboard)
})

// Cleanup
onUnmounted(() => {
  navigator.mediaDevices.removeEventListener('devicechange', getMediaDevices)
  window.removeEventListener('keydown', handleKeyboard)
  stopPreview()
})
</script>

<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: #1a1a1a;
  color: #e0e0e0;
  overflow: hidden;
}

#app {
  height: 100vh;
  display: flex;
  flex-direction: column;
}

.container {
  display: flex;
  height: 100%;
}

/* Left Panel */
.left-panel {
  width: 320px;
  background: #242424;
  padding: 15px;
  display: flex;
  flex-direction: column;
  gap: 15px;
  overflow-y: auto;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-bottom: 10px;
  border-bottom: 1px solid #333;
}

.header-right {
  display: flex;
  align-items: center;
  gap: 10px;
}

.btn-exit {
  background: #ff4444;
  border: none;
  color: white;
  width: 44px;
  height: 44px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 20px;
  line-height: 1;
  padding: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

.btn-exit:hover {
  background: #ff6666;
}

.header h1 {
  font-size: 20px;
  font-weight: 600;
}

.version {
  font-size: 12px;
  color: #888;
}

.section {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.section h3 {
  font-size: 14px;
  font-weight: 600;
  color: #4a9eff;
  margin-bottom: 4px;
}

.form-row {
  display: flex;
  gap: 8px;
}

.input-group {
  position: relative;
  width: 100%;
}

.input-group.small {
  width: 80px;
}

.input {
  width: 100%;
  padding: 8px 12px;
  background: #1a1a1a;
  border: 1px solid #333;
  border-radius: 4px;
  color: #e0e0e0;
  font-size: 13px;
}

.input.small {
  width: 80px;
}

.input:focus {
  outline: none;
  border-color: #4a9eff;
}

.floating-label {
  position: absolute;
  top: -8px;
  left: 8px;
  background: #242424;
  padding: 0 4px;
  font-size: 11px;
  color: #888;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.2s;
}

.input:focus + .floating-label,
.input:not(:placeholder-shown) + .floating-label,
.input-group select + .floating-label {
  opacity: 1;
}

/* Controls */
.controls {
  display: flex;
  gap: 12px;
  margin-top: auto;
  flex-wrap: wrap;
}

.btn {
  min-height: 44px;
  min-width: 44px;
  padding: 12px 20px;
  background: #333;
  border: none;
  border-radius: 6px;
  color: #e0e0e0;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.btn:hover:not(:disabled) {
  background: #444;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn.primary {
  background: #4a9eff;
  color: white;
}

.btn.primary:hover:not(:disabled) {
  background: #3a8eef;
}

.btn.capture {
  background: #ff6b6b;
  color: white;
}

.btn.capture:hover:not(:disabled) {
  background: #ff5252;
}

.btn.success {
  background: #51cf66;
  color: white;
}

.btn.success:hover:not(:disabled) {
  background: #40c057;
}

/* Large touch-optimized buttons */
.btn-large {
  min-height: 56px;
  font-size: 16px;
  font-weight: 600;
}

/* Dark Mode Toggle */
.btn-mode {
  background: transparent;
  border: 1px solid #444;
  color: #e0e0e0;
  width: 44px;
  height: 44px;
  border-radius: 6px;
  cursor: pointer;
  font-size: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s;
}

.btn-mode:hover {
  background: #333;
  border-color: #555;
}

/* Light Mode Styles */
.light-mode {
  background: #f5f5f5;
  color: #333;
}

.light-mode .left-panel {
  background: #fff;
  border-right: 1px solid #e0e0e0;
}

.light-mode .header {
  border-bottom-color: #e0e0e0;
}

.light-mode .section h3 {
  color: #333;
}

.light-mode .input {
  background: #f8f8f8;
  border-color: #ddd;
  color: #333;
}

.light-mode .input:focus {
  border-color: #4a9eff;
}

.light-mode .btn {
  background: #f0f0f0;
  color: #333;
}

.light-mode .btn:hover:not(:disabled) {
  background: #e0e0e0;
}

.light-mode .floating-label {
  background: #fff;
  color: #666;
}

/* Keyboard Shortcuts */
.shortcut {
  display: inline-block;
  margin-left: 8px;
  padding: 2px 6px;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 3px;
  font-size: 11px;
  font-weight: 600;
  text-transform: uppercase;
  opacity: 0.7;
}

.btn:hover .shortcut {
  opacity: 1;
}

/* Shortcuts Help */
.shortcuts-help {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 12px 16px;
  border-radius: 8px;
  font-size: 12px;
  line-height: 1.6;
  max-width: 200px;
  opacity: 0;
  transition: opacity 0.3s;
  pointer-events: none;
}

.shortcuts-help.show {
  opacity: 1;
}

.shortcuts-help h4 {
  margin: 0 0 8px 0;
  font-size: 13px;
}

.shortcuts-help kbd {
  display: inline-block;
  padding: 2px 4px;
  background: rgba(255, 255, 255, 0.2);
  border-radius: 3px;
  font-family: monospace;
  font-size: 11px;
}

/* Actions */
.actions {
  display: flex;
  flex-direction: column;
  gap: 12px;
  padding: 12px 0;
}

.checkbox {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 13px;
  cursor: pointer;
}

.checkbox input {
  cursor: pointer;
}

/* Preview Panel */
.preview-panel {
  flex: 1;
  background: #000;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.video-preview,
.captured-preview {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.placeholder {
  text-align: center;
  color: #666;
}

.placeholder-icon {
  font-size: 64px;
  margin-bottom: 16px;
}

/* Message Toast */
.message {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 12px 20px;
  border-radius: 4px;
  font-size: 14px;
  animation: slideIn 0.3s ease;
}

.message.info {
  background: #333;
  color: #e0e0e0;
}

.message.success {
  background: #51cf66;
  color: white;
}

.message.warning {
  background: #ffd43b;
  color: #333;
}

.message.error {
  background: #ff6b6b;
  color: white;
}

@keyframes slideIn {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

/* Scrollbar */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: #1a1a1a;
}

::-webkit-scrollbar-thumb {
  background: #444;
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: #555;
}
</style>