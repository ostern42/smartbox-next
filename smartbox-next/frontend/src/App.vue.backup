<template>
  <div id="app">
    <header>
      <h1>üè• SmartBox Next</h1>
      <div class="status">
        <span :class="['status-dot', { 'online': systemInfo.dicomEnabled }]"></span>
        <span>{{ systemInfo.version }}</span>
      </div>
    </header>

    <main>
      <!-- Camera Selection -->
      <section class="camera-section">
        <h2>Video Sources</h2>
        <div class="camera-grid">
          <div 
            v-for="camera in cameras" 
            :key="camera.id"
            :class="['camera-card', { 'active': selectedCamera?.id === camera.id }]"
            @click="selectCamera(camera)"
          >
            <div class="camera-icon">{{ getCameraIcon(camera.type) }}</div>
            <h3>{{ camera.name }}</h3>
            <span class="camera-type">{{ camera.type }}</span>
          </div>
        </div>
      </section>

      <!-- Preview Area -->
      <section class="preview-section">
        <div class="preview-container">
          <div v-if="!capturedImage" class="preview-placeholder">
            <p v-if="!selectedCamera">Select a camera to start</p>
            <p v-else>Preview: {{ selectedCamera.name }}</p>
          </div>
          <img v-else :src="capturedImage" alt="Captured image" class="captured-image" />
        </div>
      </section>

      <!-- Controls -->
      <section class="controls-section">
        <button 
          class="btn btn-primary" 
          @click="captureImage"
          :disabled="!selectedCamera"
        >
          üì∑ Capture Image
        </button>
        <button 
          class="btn btn-secondary" 
          @click="startVideo"
          :disabled="!selectedCamera"
        >
          üé• Start Video
        </button>
        <button 
          class="btn btn-secondary" 
          @click="refreshCameras"
        >
          üîÑ Refresh
        </button>
      </section>

      <!-- Status Messages -->
      <section v-if="message" class="message-section">
        <div :class="['message', messageType]">
          {{ message }}
        </div>
      </section>
    </main>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { GetCameras, CaptureImage, GetSystemInfo } from '../wailsjs/go/main/App'

// State
const cameras = ref([])
const selectedCamera = ref(null)
const systemInfo = ref({ version: '...', environment: 'loading', dicomEnabled: false })
const message = ref('')
const messageType = ref('info')
const capturedImage = ref(null)

// Camera type icons
const getCameraIcon = (type) => {
  const icons = {
    'webcam': 'üìπ',
    'usb': 'üîå',
    'virtual': 'üíª',
    'sdi': 'üì°'
  }
  return icons[type] || 'üì∑'
}

// Load cameras
const refreshCameras = async () => {
  try {
    cameras.value = await GetCameras()
    showMessage('Cameras refreshed', 'success')
  } catch (error) {
    showMessage('Failed to load cameras: ' + error, 'error')
  }
}

// Select camera
const selectCamera = (camera) => {
  selectedCamera.value = camera
  showMessage(`Selected: ${camera.name}`, 'info')
}

// Capture image
const captureImage = async () => {
  if (!selectedCamera.value) return
  
  try {
    const result = await CaptureImage(selectedCamera.value.id)
    // Check if result is a data URL
    if (result.startsWith('data:image')) {
      capturedImage.value = result
      showMessage('Image captured!', 'success')
    } else {
      showMessage(result, 'success')
    }
  } catch (error) {
    showMessage('Capture failed: ' + error, 'error')
  }
}

// Start video (placeholder)
const startVideo = () => {
  showMessage('Video recording not yet implemented', 'warning')
}

// Show message
const showMessage = (text, type = 'info') => {
  message.value = text
  messageType.value = type
  setTimeout(() => {
    message.value = ''
  }, 3000)
}

// Load system info
const loadSystemInfo = async () => {
  try {
    systemInfo.value = await GetSystemInfo()
  } catch (error) {
    console.error('Failed to load system info:', error)
  }
}

// Initialize
onMounted(() => {
  loadSystemInfo()
  refreshCameras()
})
</script>

<style>
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  background: #0a0e1a;
  color: #e0e6ed;
}

#app {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

/* Header */
header {
  background: #1a1f2e;
  padding: 1rem 2rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: 1px solid #2d3748;
}

header h1 {
  font-size: 1.5rem;
  font-weight: 600;
}

.status {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.875rem;
  color: #a0aec0;
}

.status-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #e53e3e;
}

.status-dot.online {
  background: #48bb78;
}

/* Main */
main {
  flex: 1;
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  width: 100%;
}

/* Sections */
section {
  margin-bottom: 2rem;
}

section h2 {
  font-size: 1.25rem;
  margin-bottom: 1rem;
  color: #cbd5e0;
}

/* Camera Grid */
.camera-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}

.camera-card {
  background: #1a1f2e;
  border: 2px solid #2d3748;
  border-radius: 8px;
  padding: 1.5rem;
  text-align: center;
  cursor: pointer;
  transition: all 0.2s;
}

.camera-card:hover {
  border-color: #4a5568;
  transform: translateY(-2px);
}

.camera-card.active {
  border-color: #4299e1;
  background: #1e293b;
}

.camera-icon {
  font-size: 2rem;
  margin-bottom: 0.5rem;
}

.camera-card h3 {
  font-size: 1rem;
  margin-bottom: 0.25rem;
}

.camera-type {
  font-size: 0.75rem;
  color: #718096;
  text-transform: uppercase;
}

/* Preview */
.preview-container {
  background: #1a1f2e;
  border: 2px solid #2d3748;
  border-radius: 8px;
  aspect-ratio: 16/9;
  display: flex;
  align-items: center;
  justify-content: center;
}

.preview-placeholder {
  text-align: center;
  color: #718096;
}

.captured-image {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  border-radius: 4px;
}

/* Controls */
.controls-section {
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
}

.btn {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 6px;
  font-size: 1rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-primary {
  background: #4299e1;
  color: white;
}

.btn-primary:hover:not(:disabled) {
  background: #3182ce;
}

.btn-secondary {
  background: #2d3748;
  color: #e2e8f0;
}

.btn-secondary:hover:not(:disabled) {
  background: #4a5568;
}

/* Messages */
.message {
  padding: 1rem;
  border-radius: 6px;
  font-size: 0.875rem;
}

.message.info {
  background: #2b6cb0;
  color: #bee3f8;
}

.message.success {
  background: #2f855a;
  color: #c6f6d5;
}

.message.warning {
  background: #c05621;
  color: #feebc8;
}

.message.error {
  background: #c53030;
  color: #fed7d7;
}
</style>